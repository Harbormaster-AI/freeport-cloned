version: 2.1

references:

working_directory: &working_directory
  /home/circleci/gitRoot/

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
        - *working_directory
  
base_terraform_image: &base_terraform_image
  hashicorp/terraform:0.11.14
  
terraform_config: &terraform_config
  docker:
    - image: *base_terraform_image
      environment:
          TERRAFORM_DIR: terraform
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      cd /home/circleci/gitRoot/terraform
      terraform init

jobs: 

  # core job
  build_test_project:

    # assign the working directory
    working_directory: *working_directory
        
    # run the steps with Docker as the primary container
    # job commands run in this container
    # CircleCI Java8 image, installs Apache Maven
    # mongo:4.0.5, run in a common network where ports exposed on 
    #      the primary container are available on localhost.
    docker:
      - image: circleci/openjdk:8-jdk-browsers
      - image: mongo:4.0.5
        command: [mongod, --smallfiles]

    # env var assignments
    environment:
        DATABASE_USERNAME: root
        DATABASE_PASSWORD:
        DATABASE_DIALECT: org.hibernate.dialect.MySQL8Dialect
        DATABASE_DRIVER: com.mysql.jdbc.Driver
        DATABASE_URL: jdbc:mysql://localhost:3306/circleci?createDatabaseIfNotExist=true
        

    # steps the core build test job
    steps:

      # check out source code to working directory
      - checkout
      # restore the saved cache after the first run or if `pom.xml` has changed
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - *restore_repo
      # user maven to first package then deploy the generated
      # Lambda functions.  The key vars (USER_AWS_ACCESSKEY and USER_AWS_SECRETKEY) are
      # read in as env vars for the current project.
      # Learn how to add these env vars at https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project
      - run: 
          name: Package application
          command: mvn package

     # cache Maven dependencies using checksum of pom.xml as the cache-key
      - *save_repo

      # save the results from the testing that occurred during
      # the maven packaging in the prior step
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always

      # cache the entire project 
      - *save_repo
      # Upload test results for display in Test Summary:
      # https://circleci.com/docs/2.0/collect-test-data/
      - store_test_results:
          path: ~/test-results
      # Upload test summary for display in Artifacts:
      # https://circleci.com/docs/2.0/artifacts/
      - store_artifacts:
          path: ~/test-results/junit

  docker_build:
    # assign the working directory
    working_directory: *working_directory

    docker: # run the steps with Docker, this image is not used and therefore ignored
      - image: circleci/python:3.7  
      
    steps:
      - *restore_repo
      - setup_remote_docker
      - run:
          name: creating docker image requiring project env vars DOCKER_USER and DOCKER_PASS
          command: |
            docker login --username  --password 
            docker build -t /: .
            docker push /:

  terraform:
    <<: *terraform_config
    steps:
      - *restore_repo
      - *terraform_init
      - add_ssh_keys: # fingerprint is returned when the private SSH key is applied to this CircleCI project
          fingerprints:
            - "50:36:21:3f:3e:fd:de:fc:2f:1f:17:a6:09:6d:1b:dd"
      - run:
          name: terraform plan
          command: |
            cd /home/circleci/gitRoot/terraform
            terraform plan -out=terraform.plan -var aws-access-key=$USER_AWS_ACCESSKEY -var aws-secret-key=$USER_AWS_SECRETKEY
            terraform apply -auto-approve "terraform.plan"
# simple workflow to build out the environment
workflows:
  version: 2
  build_test_deploy_workflow:
    jobs:
      - build_test_project
      - terraform:
          requires:
            - build_test_project
